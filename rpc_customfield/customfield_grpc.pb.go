// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rpc_customfield

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CustomFieldServiceClient is the client API for CustomFieldService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CustomFieldServiceClient interface {
	GetWorkkardCustomFieldByWorkkardId(ctx context.Context, in *CustomFieldRequest, opts ...grpc.CallOption) (*Result, error)
}

type customFieldServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCustomFieldServiceClient(cc grpc.ClientConnInterface) CustomFieldServiceClient {
	return &customFieldServiceClient{cc}
}

func (c *customFieldServiceClient) GetWorkkardCustomFieldByWorkkardId(ctx context.Context, in *CustomFieldRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/rpc_customfield.CustomFieldService/GetWorkkardCustomFieldByWorkkardId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomFieldServiceServer is the server API for CustomFieldService service.
// All implementations must embed UnimplementedCustomFieldServiceServer
// for forward compatibility
type CustomFieldServiceServer interface {
	GetWorkkardCustomFieldByWorkkardId(context.Context, *CustomFieldRequest) (*Result, error)
	mustEmbedUnimplementedCustomFieldServiceServer()
}

// UnimplementedCustomFieldServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCustomFieldServiceServer struct {
}

func (UnimplementedCustomFieldServiceServer) GetWorkkardCustomFieldByWorkkardId(context.Context, *CustomFieldRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkkardCustomFieldByWorkkardId not implemented")
}
func (UnimplementedCustomFieldServiceServer) mustEmbedUnimplementedCustomFieldServiceServer() {}

// UnsafeCustomFieldServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CustomFieldServiceServer will
// result in compilation errors.
type UnsafeCustomFieldServiceServer interface {
	mustEmbedUnimplementedCustomFieldServiceServer()
}

func RegisterCustomFieldServiceServer(s grpc.ServiceRegistrar, srv CustomFieldServiceServer) {
	s.RegisterService(&CustomFieldService_ServiceDesc, srv)
}

func _CustomFieldService_GetWorkkardCustomFieldByWorkkardId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomFieldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomFieldServiceServer).GetWorkkardCustomFieldByWorkkardId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc_customfield.CustomFieldService/GetWorkkardCustomFieldByWorkkardId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomFieldServiceServer).GetWorkkardCustomFieldByWorkkardId(ctx, req.(*CustomFieldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CustomFieldService_ServiceDesc is the grpc.ServiceDesc for CustomFieldService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CustomFieldService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc_customfield.CustomFieldService",
	HandlerType: (*CustomFieldServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWorkkardCustomFieldByWorkkardId",
			Handler:    _CustomFieldService_GetWorkkardCustomFieldByWorkkardId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/customfield.proto",
}
